{"version":3,"sources":["components/Header.js","components/BeerDesc.js","components/BeerList.js","components/RandomBeer.js","components/Footer.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","className","BeerDesc","this","props","name","image","tagline","desc","uniqueId","abv","ibu","foodPairing","key","src","alt","class","Component","beerList","map","id","description","image_url","food_pairing","RandomBeer","randomBeer","Footer","href","target","rel","App","beerDataToRender","state","listToShow","BeerList","toggleList","listType","setState","beers","Axios","get","Promise","all","then","res","data","catch","error","console","log","alert","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9e4ee27a.chunk.js","sourcesContent":["import React from '../../node_modules/react';\n\nconst Header = () => {\n    return (\n        <header>\n            <div className=\"wrapper\">\n                <h1>Beer Me</h1>\n            </div>\n        </header>\n    );\n};\n\nexport default Header;","import React, { Component } from \"../../node_modules/react\";\n\nclass BeerDesc extends Component {\n\trender() {\n\t\tconst {\n\t\t\tname,\n\t\t\timage,\n\t\t\ttagline,\n\t\t\tdesc,\n\t\t\tuniqueId,\n\t\t\tabv,\n\t\t\tibu,\n\t\t\tfoodPairing\n\t\t} = this.props;\n\n\t\treturn (\n\t\t\t<li className='beerInfo' key={uniqueId}>\n\t\t\t\t<figure>\n\t\t\t\t\t<img src={image} alt={name} />\n\t\t\t\t</figure>\n\t\t\t\t<div className='content'>\n\t\t\t\t\t<div className='contentText'>\n\t\t\t\t\t\t<h3>{name}</h3>\n\t\t\t\t\t\t<p className='tagline'>{tagline}</p>\n\t\t\t\t\t\t<p className='abv'>\n\t\t\t\t\t\t\t<span class='bold'>ABV:</span> {abv}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<p className='ibu'>\n\t\t\t\t\t\t\t<span className='bold'>IBU:</span> {ibu}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<p className='description'>{desc}</p>\n\t\t\t\t\t\t<p className='foodPairing'>\n\t\t\t\t\t\t\t<span className='bold'>Pairs well with:</span>{\" \"}\n\t\t\t\t\t\t\t{foodPairing[0]}, {foodPairing[1]}, and{\" \"}\n\t\t\t\t\t\t\t{foodPairing[2]}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</li>\n\t\t);\n\t}\n}\n\nexport default BeerDesc;\n","import React from \"../../node_modules/react\";\nimport BeerDesc from \"./BeerDesc\";\n\nconst beerList = props => {\n\treturn (\n\t\t<section className='beerList'>\n\t\t\t<ul>\n\t\t\t\t{props.beerList.map(beerList => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<BeerDesc\n\t\t\t\t\t\t\tkey={beerList.id}\n\t\t\t\t\t\t\tname={beerList.name}\n\t\t\t\t\t\t\tdesc={beerList.description}\n\t\t\t\t\t\t\ttagline={beerList.tagline}\n\t\t\t\t\t\t\timage={beerList.image_url}\n\t\t\t\t\t\t\tabv={beerList.abv}\n\t\t\t\t\t\t\tibu={beerList.ibu}\n\t\t\t\t\t\t\tfoodPairing={beerList.food_pairing}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</ul>\n\t\t</section>\n\t);\n};\n\nexport default beerList;\n","import React from \"../../node_modules/react\";\nimport BeerDesc from \"./BeerDesc\";\n\nconst RandomBeer = (props) => {\n\treturn (\n\t\t<section className='randomBeerInfo'>\n\n\t\t\t{props.randomBeer.map(randomBeer => {\n\t\t\t\treturn (\n\t\t\t\t\t<BeerDesc\n\t\t\t\t\t\tkey={randomBeer.id}\n\t\t\t\t\t\tname={randomBeer.name}\n\t\t\t\t\t\tdesc={randomBeer.description}\n\t\t\t\t\t\ttagline={randomBeer.tagline}\n\t\t\t\t\t\timage={randomBeer.image_url}\n\t\t\t\t\t\tabv={randomBeer.abv}\n\t\t\t\t\t\tibu={randomBeer.ibu}\n\t\t\t\t\t\tfoodPairing={randomBeer.food_pairing}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t})}\n\t\t</section>\n\t);\n};\n\nexport default RandomBeer;\n","import React from \"../../node_modules/react\";\n\nconst Footer = () => {\n\treturn (\n\t\t<footer>\n\t\t\t<p>Built by <a href=\"https://alexandralim.dev\" target=\"_blank\" rel=\"noopener noreferrer\">Alexandra Lim</a>, 2019</p>\n\t\t</footer>\n\t);\n};\n\nexport default Footer;\n","import React, { Component } from \"../../node_modules/react\";\nimport Axios from \"../../node_modules/axios\";\nimport Header from \"./Header\";\nimport BeerList from \"./BeerList\";\nimport RandomBeer from \"./RandomBeer\";\nimport Footer from \"./Footer\";\nimport \"../styles/App.scss\";\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tbeerList: [],\n\t\t\trandomBeer: [],\n\t\t\tlistToShow: \"beerList\"\n\t\t};\n\t}\n\n\t// two api calls are made once page is loaded - one to beer list of 25, the other to randomized beer. State is also updated to receive data\n\tcomponentDidMount() {\n\t\tconst beers = Axios.get(\"https://api.punkapi.com/v2/beers/\");\n\t\tconst randomBeer = Axios.get(\"https://api.punkapi.com/v2/beers/random\");\n\n\t\tPromise.all([beers, randomBeer])\n\t\t\t.then(res => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tbeerList: res[0].data,\n\t\t\t\t\trandomBeer: res[1].data\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.log(error);\n\t\t\t\talert(\"Try again later!\");\n\t\t\t});\n\t}\n\n\t// to generate random beer by calling random api when user clicks on randomize. randomized loop when called in beerDataToRender();\n\t// randomize = () => {\n\t//   Axios.get(\"https://api.punkapi.com/v2/beers/random\")\n\t//   .then(res => {\n\t//     this.setState({\n\t//       randomBeer: res.data,\n\t//     })\n\t//   });\n\t// }\n\n\t// to show the right content based on button clicked\n\tbeerDataToRender = () => {\n\t\tconst { beerList, randomBeer, listToShow } = this.state;\n\t\tif (listToShow === \"beerList\") {\n\t\t\treturn <BeerList beerList={beerList} />;\n\t\t} else if (listToShow === \"randomBeer\") {\n\t\t\t// this.randomize();\n\t\t\treturn (\n\t\t\t\t<RandomBeer\n\t\t\t\t\trandomBeer={randomBeer}\n\t\t\t\t\ttoggleList={this.toggleList}\n\t\t\t\t/>\n\t\t\t);\n\t\t}\n\t};\n\n\t// to change the state of listToShow\n\ttoggleList = listType => {\n\t\tthis.setState({\n\t\t\tlistToShow: listType\n\t\t});\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className='App'>\n\t\t\t\t<Header />\n\n\t\t\t\t<main>\n\t\t\t\t\t<div className='wrapper'>\n\t\t\t\t\t\t<h2>\n\t\t\t\t\t\t\tA selection of BrewDog's DIY homebrew recipes. Click\n\t\t\t\t\t\t\t\"Randomize!\" for a random recipe!\n\t\t\t\t\t\t</h2>\n\n\t\t\t\t\t\t{/* on click will toggle list to determine which beer data to show */}\n\t\t\t\t\t\t<section className=\"buttons\">\n\t\t\t\t\t\t\t<button onClick={() => this.toggleList(\"randomBeer\")}>\n\t\t\t\t\t\t\t\tRandomize!\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<button onClick={() => this.toggleList(\"beerList\")}>\n\t\t\t\t\t\t\t\tBeer List\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</section>\n\n\t\t\t\t\t\t{/* render beer data based on list toggled */}\n\t\t\t\t\t\t{this.beerDataToRender()}\n\t\t\t\t\t</div>\n\t\t\t\t</main>\n\n\t\t\t\t<Footer />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}